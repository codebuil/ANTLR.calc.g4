//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from basic.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class QBasicLexer : Lexer {
	public const int
		T__0=1, LINHA_NUM=2, STRING=3, VAR=4, PRINT=5, INPUT=6, WS=7;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "LINHA_NUM", "STRING", "VAR", "PRINT", "INPUT", "WS"
	};


	public QBasicLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", null, null, null, "'PRINT'", "'INPUT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LINHA_NUM", "STRING", "VAR", "PRINT", "INPUT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "basic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\t\x39");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x3\x2\x3\x2\x3\x3\x6\x3\x15\n\x3\r\x3\xE");
		sb.Append("\x3\x16\x3\x4\x3\x4\a\x4\x1B\n\x4\f\x4\xE\x4\x1E\v\x4\x3\x4");
		sb.Append("\x3\x4\x3\x5\x6\x5#\n\x5\r\x5\xE\x5$\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x6\b\x34\n\b");
		sb.Append("\r\b\xE\b\x35\x3\b\x3\b\x3\x1C\x2\t\x3\x3\x5\x4\a\x5\t\x6\v");
		sb.Append("\a\r\b\xF\t\x3\x2\x5\x3\x2\x32;\x3\x2\x43\\\x5\x2\v\f\xF\xF");
		sb.Append("\"\"<\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x3\x11\x3\x2\x2\x2\x5\x14\x3\x2\x2\x2\a\x18\x3\x2\x2");
		sb.Append("\x2\t\"\x3\x2\x2\x2\v&\x3\x2\x2\x2\r,\x3\x2\x2\x2\xF\x33\x3");
		sb.Append("\x2\x2\x2\x11\x12\a<\x2\x2\x12\x4\x3\x2\x2\x2\x13\x15\t\x2\x2");
		sb.Append("\x2\x14\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x14\x3\x2\x2");
		sb.Append("\x2\x16\x17\x3\x2\x2\x2\x17\x6\x3\x2\x2\x2\x18\x1C\a$\x2\x2");
		sb.Append("\x19\x1B\v\x2\x2\x2\x1A\x19\x3\x2\x2\x2\x1B\x1E\x3\x2\x2\x2");
		sb.Append("\x1C\x1D\x3\x2\x2\x2\x1C\x1A\x3\x2\x2\x2\x1D\x1F\x3\x2\x2\x2");
		sb.Append("\x1E\x1C\x3\x2\x2\x2\x1F \a$\x2\x2 \b\x3\x2\x2\x2!#\t\x3\x2");
		sb.Append("\x2\"!\x3\x2\x2\x2#$\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2");
		sb.Append("%\n\x3\x2\x2\x2&\'\aR\x2\x2\'(\aT\x2\x2()\aK\x2\x2)*\aP\x2\x2");
		sb.Append("*+\aV\x2\x2+\f\x3\x2\x2\x2,-\aK\x2\x2-.\aP\x2\x2./\aR\x2\x2");
		sb.Append("/\x30\aW\x2\x2\x30\x31\aV\x2\x2\x31\xE\x3\x2\x2\x2\x32\x34\t");
		sb.Append("\x4\x2\x2\x33\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x33\x3");
		sb.Append("\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x38\b");
		sb.Append("\b\x2\x2\x38\x10\x3\x2\x2\x2\a\x2\x16\x1C$\x35\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
